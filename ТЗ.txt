### Техническое задание (ТЗ) для разработки Weather API на DRF

#### 1. **Общие сведения**
Разработать REST API сервис на основе Django REST Framework (DRF), который предоставляет информацию о погоде для заданных пользователем городов. Сервис должен получать данные о погоде из стороннего API (например, OpenWeatherMap) и предоставлять их пользователям в формате JSON.

---

#### 2. **Функциональные требования**

##### 2.1. **Регистрация и аутентификация пользователей**
- Пользователь должен иметь возможность зарегистрироваться, аутентифицироваться и использовать сервис.
- Аутентификация должна быть реализована через токены (например, JWT).

##### 2.2. **Работа с погодными данными**
- Предоставить следующий набор данных о погоде:
  - Температура (текущая, минимальная, максимальная);
  - Влажность;
  - Скорость и направление ветра;
  - Описание погодных условий (ясно, дождь, облачно и т.д.);
  - Дата и время обновления данных.
- Реализовать возможность получения:
  - Текущей погоды по названию города;
  - Истории запросов для авторизованного пользователя.
  
##### 2.3. **История запросов**
- Хранить в базе данных историю запросов погоды для каждого пользователя (город, время запроса, возвращённые данные).
- Предоставить API для просмотра истории запросов текущего пользователя.

##### 2.4. **Администрирование**
- Реализовать интерфейс администратора для управления пользователями и записями истории запросов.

---

#### 3. **Нефункциональные требования**
- Сервис должен быть реализован на Python с использованием Django и Django REST Framework.
- База данных: PostgreSQL.
- Использовать кеширование (например, Redis) для минимизации числа запросов к стороннему API.
- Код должен быть покрыт тестами (минимум 80% покрытия).

---

#### 4. **API-эндпоинты**

##### 4.1. **Аутентификация**
- `POST /api/register/` — регистрация нового пользователя.
- `POST /api/token/` — получение JWT токена.
- `POST /api/token/refresh/` — обновление JWT токена.

##### 4.2. **Работа с погодой**
- `GET /api/weather/?city=<city_name>` — получить текущую погоду в указанном городе.
- `GET /api/history/` — получить историю запросов текущего пользователя.

##### 4.3. **Администрирование**
- Управление пользователями и историей запросов через Django Admin Panel.

---

#### 5. **Интеграция со сторонним API**
- Использовать OpenWeatherMap или другой подходящий источник данных о погоде.
- Настроить обработку ошибок (например, недоступность API, неверный город и т.д.).

---

#### 6. **Технические детали**

##### 6.1. **Зависимости**
- Django >= 4.0
- Django REST Framework >= 3.12
- djangorestframework-simplejwt (для JWT)
- psycopg2 (для работы с PostgreSQL)
- requests (для работы с внешним API)
- redis + django-redis (для кеширования)

##### 6.2. **Структура проекта**
- Приложение `users` для работы с пользователями.
- Приложение `weather` для обработки запросов погоды.
- Приложение `history` для хранения и предоставления истории запросов.

##### 6.3. **Кеширование**
- Кешировать результаты запросов к стороннему API на 10 минут.

---

#### 7. **Тестирование**
- Написать unit-тесты и интеграционные тесты для всех основных компонентов:
  - Авторизация и аутентификация.
  - Работа с погодными данными.
  - История запросов.


---

#### 9. **Дополнительные требования**
- Использовать Docker для контейнеризации приложения.
